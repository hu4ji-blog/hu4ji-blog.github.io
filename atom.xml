<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-23T10:19:07.477Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/23/Dizzy/"/>
    <id>http://example.com/2021/08/23/Dizzy/</id>
    <published>2021-08-23T09:44:40.224Z</published>
    <updated>2021-08-23T10:19:07.477Z</updated>
    
    <content type="html"><![CDATA[<h1>祥云杯2021 Dizzy</h1><p>拿到题目用IDA打开,发现一个超大的main函数</p><p><img src="/2021/08/23/Dizzy/media/ebf6df32afe64814eb0dc84068b9d4e0.png" alt=""></p><p>代码很乱,先写个idapython脚本优化一下</p><p>将这种</p><p><img src="/2021/08/23/Dizzy/media/5d1bb7a02aed17b924f22b8a5bc04af3.png" alt=""></p><p>还有这种指令全都优化了</p><p><img src="/2021/08/23/Dizzy/media/576319967abf19bd1157f8b4965c260f.png" alt=""></p><p>都优化成这样子</p><p><img src="/2021/08/23/Dizzy/media/14d9fe3d97f7d315596993fbfa383389.png" alt=""></p><p>优化之后可读性大大增加</p><p>这里的每一组操作都有个规律</p><p>像这种逻辑的,只有7条指令</p><p><img src="/2021/08/23/Dizzy/media/9c7bb682a666f2edb48e75cb01e82076.png" alt=""></p><p>而像这种的,只有5条指令</p><p><img src="/2021/08/23/Dizzy/media/efddd520921ccad8a291f7ffc94ba6d8.png" alt=""></p><p>那处理起来就很容易了,先枚举出所有操作块,然后从后往前求逆就行</p><p>我的计算flag方案是idapython生成c代码,复制到c文件里编译执行相应的flag计算代码</p><p>flag: flag{Try_R3vers1ng_W1th_ScR!pt!}</p><p>生成求逆C源码的IDAPYTHON代码:</p><pre><code>import idaapiimport idautilsimport idcflog=open('inst.log','a+')def loginst(strinst):global flogflog.write(strinst+'\n')def resolve7(inst):idx1=get_operand_value(inst[0],1)idx2=get_operand_value(inst[1],1)op=GetDisasm(inst[4])[0:3]if(op=='sub'):loginst('inp[%d]+=inp[%d];' % (idx1,idx2))if(op=='add'):loginst('inp[%d]-=inp[%d];' % (idx1,idx2))if(op=='xor'):loginst('inp[%d]^=inp[%d];' % (idx1,idx2))def resolve5(inst): idx1=get_operand_value(inst[0],1)val=get_operand_value(inst[2],1)op=GetDisasm(inst[2])[0:3]if(op=='sub'):loginst('inp[%d]+=%d;' % (idx1,val))if(op=='add'):loginst('inp[%d]-=%d;' % (idx1,val))if(op=='xor'):loginst('inp[%d]^=%d;' % (idx1,val))def resolveBlock(start):inst_list=[]cur=startwhile True:cur_dis=GetDisasm(cur)if(cur_dis.find('nop')==-1):inst_list.append(cur)if(cur_dis.find('mov     inp')!=-1):cur=next_head(cur)break;cur=next_head(cur)if(len(inst_list)==7):resolve7(inst_list)elif(len(inst_list)==5):resolve5(inst_list)else:print('invaild! %X' % start)exit()return curdef walkBlock(start):inst_list=[]cur=startwhile True:cur_dis=GetDisasm(cur)if(cur_dis.find('nop')==-1):inst_list.append(cur)if(cur_dis.find('mov     inp')!=-1):cur=next_head(cur)break;cur=next_head(cur)return curaddr=0x4011C3         block_list=[]while(addr!=0x434130):if(addr==0x43306F):addr=0x4330C0block_list.append(addr)addr=walkBlock(addr)print(len(block_list))i=len(block_list)while i!=0:i=i-1resolveBlock(block_list[i])flog.close()</code></pre><p>C源码太长了就缩略一些</p><pre><code>int main()&#123;unsigned char inp[] = &#123; 0x27,0x3C,0xE3,0xFC,0x2E,0x41,0x7,0x5E,0x62,0xCF,0xE8,0xF2,0x92,0x80,0xE2,0x36,0xB4,0xB2,0x67,0x77,0xF,0xF6,0xD,0xB6,0xED,0x1C,0x65,0x8A,0x7,0x53,0xA6,0x66 &#125;;//此处省略5000行代码printf(&quot;%s\n&quot;, inp);&#125;</code></pre><p>去混淆代码1:</p><pre><code>import idaapiimport idautilsimport idcfrom capstone import *from pwn import *def resolveBlock(start):passdef PatchByte(addr,Byte):return ida_bytes.patch_byte(addr, Byte)def copy_byte(addr,byte):for i in range(0,len(byte)):PatchByte(addr+i,byte[i])def nop(addr, size):#print(hex(addr))for i in range(0,int(size)):PatchByte(addr+i, 0x90)i=0x4011C3while i&lt;=0x434130:next_addr=idaapi.next_head(i,0xF34130)cur_size=next_addr-inext_size=idaapi.next_head(next_addr,0xF34130)-next_addrcur=GetDisasm(i)next=GetDisasm(next_addr)if(cur.find('mov     ')!=-1 and get_operand_value(i,1)==1):if(next.find('imul    ')!=-1):pos=next.find('imul    ')+len('imul    ')reg=next[pos:pos+3]#print(pos,reg)yuju='mov '+reg+','+str(get_operand_value(next_addr,2))#print(yuju)fh=Assemble(i,yuju)if(fh[0]==True):nop(i,cur_size)nop(next_addr,next_size)copy_byte(i,fh[1])else:print('error!\n')exit()i=next_addr</code></pre><p>去混淆代码2:</p><pre><code>import idaapiimport idautilsimport idcfrom capstone import *from pwn import *def resolveBlock(start):passdef PatchByte(addr,Byte):return ida_bytes.patch_byte(addr, Byte)def copy_byte(addr,byte):for i in range(0,len(byte)):PatchByte(addr+i,byte[i])def nop(addr, size):#print(hex(addr))for i in range(0,int(size)):PatchByte(addr+i, 0x90)i=0x4011C3while i&lt;=0x434130:next_addr=idaapi.next_head(i,0xF34130)cur_size=next_addr-inext_size=idaapi.next_head(next_addr,0xF34130)-next_addrcur=GetDisasm(i)next=GetDisasm(next_addr)if(cur.find('mov     ')!=-1 and get_operand_value(i,1)==1):if(next.find('shl     ')!=-1):pos=next.find('shl     ')+len('shl     ')reg=next[pos:pos+3]#print(pos,reg)yuju='mov '+reg+','+str(1 &lt;&lt; get_operand_value(next_addr,1))print(hex(i),yuju)fh=Assemble(i,yuju)if(fh[0]==True):#passnop(i,cur_size)nop(next_addr,next_size)copy_byte(i,fh[1])else:print('error!\n')exit()i=next_addr</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;祥云杯2021 Dizzy&lt;/h1&gt;
&lt;p&gt;拿到题目用IDA打开,发现一个超大的main函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/23/Dizzy/media/ebf6df32afe64814eb0dc84068b9d4e0.png&quot; alt=&quot;&quot;&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/"/>
    <id>http://example.com/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/</id>
    <published>2021-08-23T09:38:25.049Z</published>
    <updated>2021-08-23T10:19:33.214Z</updated>
    
    <content type="html"><![CDATA[<h1>祥云杯2021 勒索解密</h1><p>拿到exe,拖入ida静态分析</p><p>发现exe一开始就遍历&quot;C:\XX_CTF_XX&quot;目录下的文件</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/21a1912b137d23c1a4fea83ef91fbb3d.png" alt=""></p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/62cc5a2e0a7744d33881f1c41563ca22.png" alt=""></p><p>来到这个函数</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/900bfd67112b5aed93cea5b917e4a200.png" alt=""></p><p>这个函数获取了一个固定数据的md5,所以最后得出的md5也是固定不变的</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/0159a487645579e66607b0610669f6f7.png" alt=""></p><p>将md5经过一些转换变成AES加密的key</p><p>关键在于这行代码:</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/4d9d63396164b02217e7732885c6b439.png" alt=""></p><p>这行代码将key的第三个双字节赋值为当前时间戳</p><p>1mb大小的文件至少现在的cpu加密过程肯定不会超过半秒,这就是该题目所描述的漏洞</p><p>结合比赛平台下发的zip包里的时间数据,在线平台拿到对应时间戳</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/a339491519d3abdcd0ec44aa39378a65.png" alt=""></p><p>动态调试拿到key,再写入当时的时间戳</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/15ed5e73d38c5e95751894fd66eed4c2.png" alt=""></p><p>这个就是当时加密该文件的正确key了</p><p>然后模拟exe加密流程解密就行</p><p>解密出来bmp:</p><p><img src="/2021/08/23/%E5%8B%92%E7%B4%A2%E8%A7%A3%E5%AF%86/media/ed4dca8a57330ab973e49b42ee4ed793.png" alt=""></p><p>完整解密代码:</p><pre><code>#include &lt;iostream&gt;#include &quot;windows.h&quot;#include &quot;wincrypt.h&quot;int main()&#123;unsigned char deckey[] = &quot;\xB2\x2F\xC6\x0E\x4F\xD4\x54\x4B\x4A\x59\x22\x61\x21\xE7\xB1\x8E&quot;;*(ULONG*)(deckey + 8) = 0x611A1105;HCRYPTPROV prov = 0;CryptAcquireContextA(&amp;prov, NULL, &quot;Microsoft Enhanced RSA and AES Cryptographic Provider&quot;, PROV_RSA_AES, CRYPT_VERIFYCONTEXT);HCRYPTHASH hash = 0;CryptCreateHash(prov, 0x800C, 0, 0, &amp;hash);HCRYPTKEY pkey = 0;CryptHashData(hash, (BYTE*)deckey, 0x10, 0);CryptDeriveKey(prov, 0x660E, hash, 0, &amp;pkey);DWORD pppp = 1;CryptSetKeyParam(pkey, 4u, (BYTE *)&amp;pppp, 0);DWORD vfvf = 1;CryptSetKeyParam(pkey, 3u, (BYTE*)&amp;vfvf, 0);HANDLE hFile = CreateFileA(&quot;flag.bmp.ctf_crypter&quot;, GENERIC_ALL, 1, 0, 3, 0, 0);DWORD sz = GetFileSize(hFile, 0);PUCHAR pdata = (PUCHAR)malloc(sz+9999999);DWORD read = 0;ReadFile(hFile, pdata, sz, &amp;read, 0);HCRYPTKEY v2; // eaxBOOL end; // edxint i_1; // ebxint off; // ecxint filesz; // eaxBOOL v9; // [esp+4h] [ebp-18h]int i; // [esp+8h] [ebp-14h]BYTE v11[4]; // [esp+Ch] [ebp-10h] BYREFBYTE pbData[4]; // [esp+10h] [ebp-Ch] BYREFDWORD pdwDataLen; // [esp+14h] [ebp-8h] BYREFPUCHAR use_pdata = pdata;int v3 = 0;if (sz % 16) &#123;v3 = sz / 16 + 1;&#125;else &#123;v3 = sz / 16;&#125;end = 0;i_1 = 0;v3 = sz;off = 0;filesz = v3 - 1;for (i = 0; ; i += 16)&#123;pdwDataLen = 16;if (i_1 == filesz)end = 1;v9 = end;if (!CryptDecrypt(pkey, 0, end, 0, (BYTE*)(off + use_pdata), &amp;pdwDataLen))break;if (off &gt; sz)break;printf(&quot;%X\n&quot;, off);++i_1;off = i + 16;filesz = v3 - 1;end = v9;if (i_1 &gt;= v3)return 1;&#125;HANDLE hFile2 = CreateFileA(&quot;flag.bmp&quot;, GENERIC_ALL, 1, 0, CREATE_ALWAYS, 0, 0);WriteFile(hFile2, pdata, sz, &amp;read, 0);std::cout &lt;&lt; &quot;Hello World!\n&quot;;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;祥云杯2021 勒索解密&lt;/h1&gt;
&lt;p&gt;拿到exe,拖入ida静态分析&lt;/p&gt;
&lt;p&gt;发现exe一开始就遍历&amp;quot;C:\XX_CTF_XX&amp;quot;目录下的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/23/%E5%8B%92%E7%B4%A2%E8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/23/Rev_APC/"/>
    <id>http://example.com/2021/08/23/Rev_APC/</id>
    <published>2021-08-23T02:51:19.090Z</published>
    <updated>2021-08-23T10:18:26.405Z</updated>
    
    <content type="html"><![CDATA[<h1>祥云杯2021 Rev_APC</h1><p>差点拿一血,可惜了</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/9e9bfd3f30522d58bec398515a40df30.png" alt=""></p><p>一看题目给出的文件,可以确定是本人最擅长的Windows内核和注入相关题目,必须要把这个驱动安排的明明白白的</p><p>把驱动拖入IDA分析,发现创建了通信设备</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/34898a956775b98b94a250d2d0b283f1.png" alt=""></p><p>解密加密的dll文件数据,释放到C:\WINDOWS\TEMP\InjectDLL.dll<img src="media_REVAPC/6ca9442f65d7e9df4c9c5aedc31bd987.png" alt=""></p><p>注册了minifilter,暂时没有发现这个minifilter有什么用,可能是配合LoadImage回调里的计算文件名用的</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/eb0473731695c5398afc751aa3ff1c63.png" alt=""></p><p>还另外创建了LPC端口用来与r3通信</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/992ba334e435c0da4c5dcb6e6003464d.png" alt=""></p><p>创建一个SystemThread监听LPC端口</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/883fa96d2bb3afba9be0da06b6cb9fde.png" alt=""></p><p>创建了进程通知回调和LoadImage回调</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/b96b740c81cdb24765006467f0945f02.png" alt=""></p><p>先来看进程通知回调</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/79ebdfb55e2b46d4f954381ef7c9904f.png" alt=""></p><p>insert_contextlist这边取了一波进程映像名字符串的hash,如果是explorer.exe,就设置context+301的flag,其实就是指定注入explorer.exe</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/0941d0b18f97b5cb9c74e1863704bbfb.png" alt=""></p><p>来看LoadImage回调</p><p>如果当前执行该回调的进程是explorer.exe,则插入一个内核模式apc</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/6432975013e3cf99bfd5c20f9ac37d85.png" alt=""></p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/80e6de4d86041894a41614ebb8a9f49e.png" alt=""></p><p>fntable[0x100]的地方是执行注入r3的函数,所以文件名算出来的合必须为0x100</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/9135714dc3ea8ee01e79cb17bb9522c9.png" alt=""></p><p>注入shellcode的过程是用ZwMapViewOfSection来申请R3注入代码所需的RWX内存,然后插入用户模式APC,异步执行R3注入代码</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/60bf87fea5b47af10ee8b9bfc2e82211.png" alt=""></p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/f2dfd25ad02da40a1c54a65c6f233c3e.png" alt=""></p><p>R3 shellcode:</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/ada89dddeb9a37b61bc84cc2fefea063.png" alt=""></p><p>至此,该驱动的基本功能已分析完毕</p><h3 id="构建调试环境条件">构建调试环境条件</h3><p>因为要求注入的是explorer.exe,但是注入系统的explorer.exe会导致进程崩溃,所以我自己编译了一份与explorer.exe映像名称相同的exe来调试InjectDLL.dll</p><p>我这里预先计算出来了一个文件名来绕过Load<br>Image回调的限制<img src="media_REVAPC/7746ec19fe4965b30dffe0c3889b2092.png" alt=""></p><h3 id="分析InjectDLL-dll">分析InjectDLL.dll</h3><p>先Load了一个不存在的dll,调用了里面的&quot;GetContentHash&quot;函数</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/64cadba1964cb6224f19a49a9ffbf25f.png" alt="">l</p><p>字符串&quot;test&quot;对应的hash为36F028580BB02CC8272A9A020F4200E346E276AE664E45EE80745574E2F5AB80,经过一番搜索后,可知这是SHA3-256算法</p><p>在线计算得出字符串’AkiraDDL’的SHA3-256值为9d5f741799d7e62274f01963516316d2eb6888b737bab0a2b0e1774e3b7389e5</p><p>手动编写一个dll,导出GetContentHash函数,粗略cmp一下就行</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/7164598c651899da035f4aa2adba97ee.png" alt=""></p><p>创建设备与R0通信,然后再使用lpc和r0通信</p><p>这里的数据都是固定的,动态调试dump下来就行</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/1a273744b935a08418a330639c86f497.png" alt=""></p><p>这里的rand没有设定随机数种子,所以可以模拟出来每次的返回值</p><p><img src="/2021/08/23/Rev_APC/media_REVAPC/674d37024198f0e418aa62e37a6fb0bb.png" alt=""></p><p>case里面是与驱动通信来加密buf的</p><p>将各个加密函数求出逆运算即可解密flag</p><p>flag : flag{Kmode_Umode_Communication!}</p><p>解密代码:</p><pre><code>#include &lt;iostream&gt;#include &quot;windows.h&quot;#include &quot;intrin.h&quot;void re_dec1(PCHAR b1, PCHAR b2) &#123;char v9;char v8;for (int i = 0x1F; i &gt;= 0; i--) &#123;v9 = i;v8 = b1[i];b2[i] ^= v8;b1[i] -= 0x10;&#125;&#125;void re_dec2(PCHAR b1, PCHAR b2) &#123;char v8 = 0;for (int i = 0x1F; i &gt;= 0; i--) &#123;char b1v = b1[i];_asm mov al, b1v;_asm ror al, 4;_asm mov v8, al;b2[i] ^= v8;&#125;for (int i = 0x1F; i &gt;= 0; i--) &#123;b1[i] += 80;&#125;&#125;void re_dec3(PCHAR b1, PCHAR b2) &#123;for (int i = 0x1F; i &gt;= 0; i--) &#123;b2[i] ^= b1[i];&#125;&#125;void re_dec4(PCHAR b1, PCHAR b2) &#123;/*for (int i = 0xF; i &gt;= 0; i--) &#123;char v = b1[i * 2];b2[i * 2 + 1] ^= v &gt;&gt; 4;b2[i * 2] ^= v * 16;&#125;*/BYTE* v8; // r8BYTE* fu_sz; // r10unsigned __int64 v10; // r9unsigned __int8 v_pbuf1; // clv8 = (BYTE*)(b2 + 1);fu_sz = (BYTE*)-0x20;v10 = 0x10;// 0x10do&#123;v_pbuf1 = v8[(DWORD64)fu_sz - 1];*v8 ^= v_pbuf1 &gt;&gt; 4;v8 += 2;*(v8 - 3) ^= 16 * v_pbuf1;--v10;&#125; while (v10);for (int i = 0x1F; i &gt;= 0; i--) &#123;b1[i] += 80;&#125;&#125;void re_dec5(PCHAR b1, PCHAR b2) &#123;for (int i = 0x1F; i &gt;= 0; i--) &#123;b2[i] ^= b1[i];&#125;char* buf1_right = &amp;b1[0x10];char* buf1_left = &amp;b1[0x10 - 1];for (int i = 0xF; i &gt;= 0; i--) &#123;char temp = 0;temp = *buf1_right;*buf1_right = *buf1_left;*buf1_left = temp;buf1_left--;buf1_right++;&#125;char* buf1_start = b1;char* buf1_end = &amp;b1[0x20 - 1];for (int i = 0xF; i &gt;= 0; i--) &#123;char temp = 0;temp = *buf1_start;*buf1_start = *buf1_end;*buf1_end = temp;buf1_start++;buf1_end--;&#125;&#125;void re_dec6(PUCHAR b1, PUCHAR b2) &#123;unsigned char v8 = 0;unsigned char v7 = 0;unsigned char v6 = 0;for (int i = 0x1F; i &gt;= 0; i--) &#123;if (b1[i] == 0x50)continue;if (b1[i] == 0x80)__debugbreak();if (b1[i] &gt; 0x50 &amp;&amp; b1[i] &lt;= 0xCF) &#123;v8 = b1[i];b1[i] += 0x30;b2[i] += v8;&#125;else if (b1[i] &gt; 0x20 &amp;&amp; b1[i] &lt;= 0x4F) &#123;v7 = b1[i];b1[i] += 0x30;b2[i] ^= v7 &gt;&gt; 4;&#125;else if (b1[i] &gt; 0xD0 &amp;&amp; b1[i] &lt;= 0xFF) &#123;v6 = b1[i];b1[i] += 0x50;b2[i] -= v6;&#125;&#125;&#125;int main()&#123;unsigned char pstatic[] = &#123; 0xF5, 0x9A, 0xF7, 0xA1, 0xC4, 0xA7, 0xD6, 0x23, 0xE1, 0x28, 0xEF, 0xB8, 0xDE, 0x23, 0xE7, 0x2F &#125;;unsigned char pebuf[] = &#123; 0xDC, 0xA7, 0xCA, 0x92, 0xFE, 0x9D, 0xED, 0xB8, 0x70, 0x29, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5, 0xE5 &#125;;unsigned char use_buf1[0x20] = &#123; 0 &#125;;memcpy(use_buf1, pstatic, 0x10);memcpy(use_buf1 + 0x10, pebuf, 0x10);unsigned char use_buf2[0x20] = &#123; 0 &#125;;*(ULONG64*)use_buf2 = 0x2F34A83A1B38C557;*(ULONG64*)(use_buf2 + 0x8) = 0xEE8F2F04E4C69739;*(ULONG*)(use_buf2 + 0x10) = 0x6780515E;*(ULONG*)(use_buf2 + 0x14) = 0x486FC924;*(ULONG*)(use_buf2 + 0x18) = 0xC7BD7F5B;*(ULONG*)(use_buf2 + 0x1C) = 0xEBC2C2B0;unsigned char all_buf[0x40] = &#123; 0 &#125;;memcpy(all_buf, use_buf1, 0x20);memcpy(all_buf + 0x20, use_buf2, 0x20);char* pbuf1 = (char*)all_buf;char* pbuf2 = (char*)(all_buf + 0x20);int reverseidx[32] = &#123; 0 &#125;;HMODULE hmod = LoadLibraryA(&quot;ucrtbase.dll&quot;);typedef int (*fnrand)();fnrand prand = (fnrand)GetProcAddress(hmod, &quot;rand&quot;);for (int i = 0; i &lt; 32; i++) &#123;int v = prand() % 6;reverseidx[i] = v;printf(&quot;%d\n&quot;, v);&#125;for (int j = 31; j &gt;= 0; j--) &#123;int i = reverseidx[j];switch (i)&#123;case 0:re_dec1(pbuf1, pbuf2);break;case 1:re_dec2(pbuf1, pbuf2);break;case 2:re_dec3(pbuf1, pbuf2);break;case 3:re_dec4(pbuf1, pbuf2);break;case 4:re_dec5(pbuf1, pbuf2);break;case 5:re_dec6((PUCHAR)pbuf1, (PUCHAR)pbuf2);break;default:break;&#125;&#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;祥云杯2021 Rev_APC&lt;/h1&gt;
&lt;p&gt;差点拿一血,可惜了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/23/Rev_APC/media_REVAPC/9e9bfd3f30522d58bec398515a40df30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Reverse]美团ctf 2021 100mazes WriteUp</title>
    <link href="http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/"/>
    <id>http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/</id>
    <published>2021-05-23T16:01:21.000Z</published>
    <updated>2021-05-23T17:09:10.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解题思路">解题思路</h2><p>拿到题目,发现有混淆,用脚本去除后F5出伪代码</p><img src="/2021/05/24/ida1.png" alt="ida1" style="zoom: 50%;" /><p>这里迷宫函数的算法基本都是这样的</p><img src="/2021/05/24/ida2.png" alt="ida2" style="zoom:50%;" /><img src="/2021/05/24/ida3.png" alt="ida3" style="zoom: 50%;" /><p>迷宫的行走逻辑是堆栈里初始化一个地图1,.data段里有一个地图2,定义一个起始坐标(x,y),然后开始往周围走,如果当前地图1(x,y)对应的值和地图2(x,y)对应的值互相异或的结果为整数46并且当前坐标≠上上次的坐标的时候就算正确的路径,每个迷宫有15步</p><p>得出计算迷宫路径的算法:</p><pre><code>#include &lt;iostream&gt;#include &quot;windows.h&quot;int x = 0;int y = 0;int prev_x = 0;int prev_y = 0;int switch_line(const int* maze1, const char* maze2) &#123;int ori_x = x;int ori_y = y;int result = -1;if (x + 1 &lt; 25 &amp;&amp; x + 1 != prev_x) &#123;if ((maze1[y * 25 + x + 1] ^ (((int)maze2[y * 25 + x + 1]) &amp; 0xFF)) == 46) &#123;x = x + 1;result = 3;goto go_end;&#125;&#125;if (x - 1 &gt;= 0 &amp;&amp; x - 1 != prev_x) &#123;if ((maze1[y * 25 + x - 1] ^ (((int)maze2[y * 25 + x - 1]) &amp; 0xFF)) == 46) &#123;x = x - 1;result = 2;goto go_end;&#125;&#125;if (y + 1 &lt; 25 &amp;&amp; y + 1 != prev_y) &#123;if ((maze1[(y + 1) * 25 + x] ^ (((int)maze2[(y + 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y + 1;result = 1;goto go_end;&#125;&#125;if (y - 1 &gt;= 0 &amp;&amp; y - 1 != prev_y) &#123;if ((maze1[(y - 1) * 25 + x] ^ (((int)maze2[(y - 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y - 1;result = 0;goto go_end;&#125;&#125;if (result == -1)_CrtDbgBreak();go_end:prev_x = ori_x;prev_y = ori_y;return result;&#125;void calc_maze(const char* keys, int start_x, int start_y, const int* maze1, const char* maze2) &#123;x = start_x;y = start_y;prev_x = x;prev_y = y;for (int i = 0; i &lt; 15; i++) &#123;printf(&quot;%c&quot;, keys[switch_line(maze1, maze2)]);&#125;&#125;</code></pre><p>到此只完成了一半…有100个迷宫呢,手动输入这些迷宫数据不知道得多久</p><p>我用的方法是利用IDApython自动解析每个迷宫的数据,并且自动生成C源码,部分数据手动输入</p><pre><code>import idaapiimport idautilsdef Section1_0():return 0x5F0def Section1_1():return 0xA7400maze2_list=[]code2_list=[]def walk_stack_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9FA'):return retstrinst_addr=idc.next_head(inst_addr)def walk_key_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9F6'):return retstrinst_addr=idc.next_head(inst_addr)def walk_func(start,end):cnt=0cur_inst=startwhile cur_inst!=0xffffffffffffffff:cur_inst=idc.next_head(cur_inst)inst_str=idc.GetDisasm(cur_inst)if(inst_str[0:20]=='mov     [rbp+var_C6A'):rstr=walk_stack_mem(cur_inst)maze2_list.append(&quot;maze2 = \&quot;&quot;+rstr+&quot;\&quot;;&quot;)cnt=cnt+1if(inst_str[0:20]=='mov     [rbp+var_9F9'):rstr=walk_key_mem(cur_inst)code2_list.append(&quot;calc_maze(\&quot;&quot;+rstr)walk_func(Section1_0(),Section1_1())find_maze1(Section1_0(),Section1_1())deststr=&quot;&quot;for i in range(100):deststr=deststr+maze2_list[i]+'\n'+code2_list[i]+'\n'f=open('code2.txt','w+')f.write(deststr)f.close()</code></pre><p>解出输入数据为99g99M9999ggggpCSSSOOlOllOlOOOrrrnnnnrnntttntTmm44m44K444m44DDJJxJJDJJDDDDStjtjjttPtPPPtPPQ<br>vQQyQQQyQQQvvc11KKDKDDAADDDAA4444jjjYjYYY99YQQQxxQQxxnxnnxn66A6AANNWNNWNNWY1YYY<br>1Y11QQQQ1QBBxxhhhhhhxhxhxPyPPVVVPPPyyPPVpzzzzpzzhhhhhzhuuggguururrr00rssXX3X3X33t3t3tqKq<br>qKKEEKEEEwEw1zzjzjjojojoojomKmmmKKXXXKKXKXQQFFQFFQQ8Q88QQllRRlljjllllRlRo666o6oooommQmQJ<br>JRJJJSJSJSJSJJBFFBFBFBBFBFFkFCCGGCCXCCXXvvXXxEEGGGWGWWGGWWx4464644QQQ44Q44HyyHHhHHHy<br>yHHHyeFFFFeFFuuuuuukTbTTFTFTFF55555LfffLffffoooonnXXPPGPPGPGGGGPPBooBoBB4BBB44B4TkTTkkk<br>GG0GG00GZZdZddAdAAAAAAW8d88HHHHHnnHnnHJJNJNJNJJJYYIYYNN00ppppQpQpppQzTTTzTzTTTTZZfZU<br>ppppeppUUpUUmUVMVVlVlVVVMVMVVL9L99O99999O9OOBQBQQSSSSSSSSgSjgjgjgggguggjggvpvppp88p8<br>pppppojojjooooojojjjTcTTTTuTTcTTTTTmnnDnDDSDDnDnDn3C3C3C3C333jjhjxxZZxZxZxxxxxxxWWUUWWU<br>UUWWEWEEo00o000EE00E000KKEKEKEEEEKKEE9viiviiivvggggg200V000VVeVV0VVVvvuu1u1u1u111NNCkCC<br>Ckkk55I5555zFzz9z99eeeeeFe5BBBBppBppppFppMMMMMMaaanannna4gggg4ggtttssssfHfHHDDHDDDDH<br>DDcqcqqqqqqtqqccIppzpzzppzppzzUzrvvrvrrtrtrrvrrCppZppCppCCQCCQOkOkOOSSOSS66SSZvvvvOOTTTO<br>OOTOvvKKvvGvvvGGaaaYddMMdMdMMjMjMMQOQOO555LL5LLLQvvBvBBfBBfffBBvdzdzdzdzzfzfzffzXXXh<br>XhXhXhhhhXADAAAAffHHffAfAKQKQQKKpppKpKKphhJJhJhJhJJJPPqoooHHHoHoHooDoDC3333CC6CC666C6<br>LOLOLOLOLOOLOOOxexxee3ee33eeeerrvrrrrvvYYYYYYvvvvvGGGGGwGwGGJnJJnnnnwwwywwnncccncnccU<br>cUUUdOrOOOrOrrYYYNYYW0WW00W00WWWFWFzzQzQQzzaaasaazbGbGGLLYLYLYYbYsfssfffffmmfmfmW<br>WKKVKKVKKWKKVKVsVsVsVVVsVVtVtZ4Z4444MMMMMjjZddnddaaddnnddaaIIIIhIIIIIiiiiW3ffff88ff3f3ff8FfFFfF<br>fFFSFFfFFkkrrrsrsrrsssppiMiiWiiMMiiMiMi</p><p>md5后: 60e925573e0c31236eb1c57005fc0655<br>flag: flag{60e92557-3e0c-3123-6eb1-c57005fc0655}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;拿到题目,发现有混淆,用脚本去除后F5出伪代码&lt;/p&gt;
&lt;img src=&quot;/2021/05/24/ida1.png&quot; alt=&quot;ida1&quot; style=&quot;zoom: 50%;&quot; /&gt;
&lt;p&gt;这里迷宫函数的算法基本都是这样的&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Hu4ji] 开始写Blog记录自己ctf的学习经历</title>
    <link href="http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    <id>http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/</id>
    <published>2021-05-18T08:51:41.000Z</published>
    <updated>2021-05-18T15:02:47.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人说明"><a href="#个人说明" class="headerlink" title="个人说明"></a>个人说明</h2><p>本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.</p><p>2020年开始逐渐进入ctf这个圈子,参加过一些ctf比赛,ctf的解题手法还是和现实对抗还是有着很大的区别 </p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>之前打逆向只会IDA看算法,密码学啥的是啥也不会(手动狗头</p><p>打hws2021的时候,第二题obfu有个环节是AES算法,当时这个算法的IDA反汇编看的我是人都麻了,最后想到了一个好办法</p><p>这是那题AES加密的函数:</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ida1.png" alt="ida1"></p><p>既然输入输出的数据是4字节的…那么输入的明文数据肯定在0-0xFFFFFFFF之间,所以直接模拟这个函数的加密流程,把输入明文数据0-0xFFFFFFFF的所有对应密文数据保存进一个文件,然后通过这个文件来查询每个明文对应的密文,相当于暴力破解了这个加密函数23333,最后跑出了一个16GB的文件来破解这个加密函数</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf2.png" alt="ctf2"></p><p>跑出flag</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf_flag.png" alt="ctf_flag"></p><p>这题是肝了整整两天…最后flag是做出来了,比赛结束回头一看别人的writeup,深深的体会到了自己对CTF逆向这块不了解的东西太多了</p><h2 id="开始学习CTF"><a href="#开始学习CTF" class="headerlink" title="开始学习CTF"></a>开始学习CTF</h2><p>本人ctf方向 : re/pwn</p><p>经历了hws的那次难受的解题之后,我觉得不能在这么靠蛮力逆下去了,必须要开始学习起技巧.</p><p>Reverse : 首先就是密码学的那些加解密算法,打Reverse密码学真的是太重要了,我给自己的要求是能够用C++手写出那些加解密算法,手写过一遍才能真正了解这些算法的底层实现和细节</p><p>PWN : 个人感觉学pwn主要还是看wp学技巧,不过得要非常熟悉Linux环境,许多PWN的技巧还是利用Linux的各种特性和机制,比如格式化字符串漏洞,Linux系统上的格式化字符串是会有一些特殊的规则的,还有main函数里头的environ结构泄露栈地址指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个人说明&quot;&gt;&lt;a href=&quot;#个人说明&quot; class=&quot;headerlink&quot; title=&quot;个人说明&quot;&gt;&lt;/a&gt;个人说明&lt;/h2&gt;&lt;p&gt;本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.&lt;/p&gt;
&lt;p&gt;2020年开始逐渐进入ctf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/05/16/hello-world/"/>
    <id>http://example.com/2021/05/16/hello-world/</id>
    <published>2021-05-16T15:02:17.809Z</published>
    <updated>2021-05-16T15:02:17.809Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
