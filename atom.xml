<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-23T17:02:17.404Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Reverse]美团ctf 2021 100mazes WriteUp</title>
    <link href="http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/"/>
    <id>http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/</id>
    <published>2021-05-23T16:01:21.000Z</published>
    <updated>2021-05-23T17:02:17.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解题思路">解题思路</h2><p>拿到题目,发现有混淆,用脚本去除后F5出伪代码</p><img src="/2021/05/24/ida1.png" alt="ida1" style="zoom: 50%;" /><p>这里迷宫函数的算法基本都是这样的</p><img src="/2021/05/24/ida2.png" alt="ida2" style="zoom:50%;" /><img src="/2021/05/24/ida3.png" alt="ida3" style="zoom: 50%;" /><p>迷宫的行走逻辑是堆栈里初始化一个地图1,.data段里有一个地图2,定义一个起始坐标(x,y),然后开始往周围走,如果当前地图1(x,y)对应的值和地图2(x,y)对应的值互相异或的结果位整数46并且当前坐标≠上上次的坐标的时候就算正确的路径,每个迷宫有15步</p><p>得出计算迷宫路径的算法:</p><pre><code>#include &lt;iostream&gt;#include &quot;windows.h&quot;int x = 0;int y = 0;int prev_x = 0;int prev_y = 0;int switch_line(const int* maze1, const char* maze2) &#123;int ori_x = x;int ori_y = y;int result = -1;if (x + 1 &lt; 25 &amp;&amp; x + 1 != prev_x) &#123;if ((maze1[y * 25 + x + 1] ^ (((int)maze2[y * 25 + x + 1]) &amp; 0xFF)) == 46) &#123;x = x + 1;result = 3;goto go_end;&#125;&#125;if (x - 1 &gt;= 0 &amp;&amp; x - 1 != prev_x) &#123;if ((maze1[y * 25 + x - 1] ^ (((int)maze2[y * 25 + x - 1]) &amp; 0xFF)) == 46) &#123;x = x - 1;result = 2;goto go_end;&#125;&#125;if (y + 1 &lt; 25 &amp;&amp; y + 1 != prev_y) &#123;if ((maze1[(y + 1) * 25 + x] ^ (((int)maze2[(y + 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y + 1;result = 1;goto go_end;&#125;&#125;if (y - 1 &gt;= 0 &amp;&amp; y - 1 != prev_y) &#123;if ((maze1[(y - 1) * 25 + x] ^ (((int)maze2[(y - 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y - 1;result = 0;goto go_end;&#125;&#125;if (result == -1)_CrtDbgBreak();go_end:prev_x = ori_x;prev_y = ori_y;return result;&#125;void calc_maze(const char* keys, int start_x, int start_y, const int* maze1, const char* maze2) &#123;x = start_x;y = start_y;prev_x = x;prev_y = y;for (int i = 0; i &lt; 15; i++) &#123;printf(&quot;%c&quot;, keys[switch_line(maze1, maze2)]);&#125;&#125;</code></pre><p>到此只完成了一半…有100个迷宫呢,手动输入这些迷宫数据不知道得多久</p><p>我用的方法是利用IDApython自动解析每个迷宫的数据,并且自动生成C源码,部分数据手动输入</p><pre><code>import idaapiimport idautilsdef Section1_0():return 0x5F0def Section1_1():return 0xA7400maze2_list=[]code2_list=[]def walk_stack_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9FA'):return retstrinst_addr=idc.next_head(inst_addr)def walk_key_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9F6'):return retstrinst_addr=idc.next_head(inst_addr)def walk_func(start,end):cnt=0cur_inst=startwhile cur_inst!=0xffffffffffffffff:cur_inst=idc.next_head(cur_inst)inst_str=idc.GetDisasm(cur_inst)if(inst_str[0:20]=='mov     [rbp+var_C6A'):rstr=walk_stack_mem(cur_inst)maze2_list.append(&quot;maze2 = \&quot;&quot;+rstr+&quot;\&quot;;&quot;)cnt=cnt+1if(inst_str[0:20]=='mov     [rbp+var_9F9'):rstr=walk_key_mem(cur_inst)code2_list.append(&quot;calc_maze(\&quot;&quot;+rstr)walk_func(Section1_0(),Section1_1())find_maze1(Section1_0(),Section1_1())deststr=&quot;&quot;for i in range(100):deststr=deststr+maze2_list[i]+'\n'+code2_list[i]+'\n'f=open('code2.txt','w+')f.write(deststr)f.close()</code></pre><p>解出输入数据为99g99M9999ggggpCSSSOOlOllOlOOOrrrnnnnrnntttntTmm44m44K444m44DDJJxJJDJJDDDDStjtjjttPtPPPtPPQ<br>vQQyQQQyQQQvvc11KKDKDDAADDDAA4444jjjYjYYY99YQQQxxQQxxnxnnxn66A6AANNWNNWNNWY1YYY<br>1Y11QQQQ1QBBxxhhhhhhxhxhxPyPPVVVPPPyyPPVpzzzzpzzhhhhhzhuuggguururrr00rssXX3X3X33t3t3tqKq<br>qKKEEKEEEwEw1zzjzjjojojoojomKmmmKKXXXKKXKXQQFFQFFQQ8Q88QQllRRlljjllllRlRo666o6oooommQmQJ<br>JRJJJSJSJSJSJJBFFBFBFBBFBFFkFCCGGCCXCCXXvvXXxEEGGGWGWWGGWWx4464644QQQ44Q44HyyHHhHHHy<br>yHHHyeFFFFeFFuuuuuukTbTTFTFTFF55555LfffLffffoooonnXXPPGPPGPGGGGPPBooBoBB4BBB44B4TkTTkkk<br>GG0GG00GZZdZddAdAAAAAAW8d88HHHHHnnHnnHJJNJNJNJJJYYIYYNN00ppppQpQpppQzTTTzTzTTTTZZfZU<br>ppppeppUUpUUmUVMVVlVlVVVMVMVVL9L99O99999O9OOBQBQQSSSSSSSSgSjgjgjgggguggjggvpvppp88p8<br>pppppojojjooooojojjjTcTTTTuTTcTTTTTmnnDnDDSDDnDnDn3C3C3C3C333jjhjxxZZxZxZxxxxxxxWWUUWWU<br>UUWWEWEEo00o000EE00E000KKEKEKEEEEKKEE9viiviiivvggggg200V000VVeVV0VVVvvuu1u1u1u111NNCkCC<br>Ckkk55I5555zFzz9z99eeeeeFe5BBBBppBppppFppMMMMMMaaanannna4gggg4ggtttssssfHfHHDDHDDDDH<br>DDcqcqqqqqqtqqccIppzpzzppzppzzUzrvvrvrrtrtrrvrrCppZppCppCCQCCQOkOkOOSSOSS66SSZvvvvOOTTTO<br>OOTOvvKKvvGvvvGGaaaYddMMdMdMMjMjMMQOQOO555LL5LLLQvvBvBBfBBfffBBvdzdzdzdzzfzfzffzXXXh<br>XhXhXhhhhXADAAAAffHHffAfAKQKQQKKpppKpKKphhJJhJhJhJJJPPqoooHHHoHoHooDoDC3333CC6CC666C6<br>LOLOLOLOLOOLOOOxexxee3ee33eeeerrvrrrrvvYYYYYYvvvvvGGGGGwGwGGJnJJnnnnwwwywwnncccncnccU<br>cUUUdOrOOOrOrrYYYNYYW0WW00W00WWWFWFzzQzQQzzaaasaazbGbGGLLYLYLYYbYsfssfffffmmfmfmW<br>WKKVKKVKKWKKVKVsVsVsVVVsVVtVtZ4Z4444MMMMMjjZddnddaaddnnddaaIIIIhIIIIIiiiiW3ffff88ff3f3ff8FfFFfF<br>fFFSFFfFFkkrrrsrsrrsssppiMiiWiiMMiiMiMi</p><p>md5后: 60e925573e0c31236eb1c57005fc0655<br>flag: flag{60e92557-3e0c-3123-6eb1-c57005fc0655}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;拿到题目,发现有混淆,用脚本去除后F5出伪代码&lt;/p&gt;
&lt;img src=&quot;/2021/05/24/ida1.png&quot; alt=&quot;ida1&quot; style=&quot;zoom: 50%;&quot; /&gt;
&lt;p&gt;这里迷宫函数的算法基本都是这样的&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Hu4ji] 开始写Blog记录自己ctf的学习经历</title>
    <link href="http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    <id>http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/</id>
    <published>2021-05-18T08:51:41.000Z</published>
    <updated>2021-05-18T15:02:47.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人说明"><a href="#个人说明" class="headerlink" title="个人说明"></a>个人说明</h2><p>本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.</p><p>2020年开始逐渐进入ctf这个圈子,参加过一些ctf比赛,ctf的解题手法还是和现实对抗还是有着很大的区别 </p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>之前打逆向只会IDA看算法,密码学啥的是啥也不会(手动狗头</p><p>打hws2021的时候,第二题obfu有个环节是AES算法,当时这个算法的IDA反汇编看的我是人都麻了,最后想到了一个好办法</p><p>这是那题AES加密的函数:</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ida1.png" alt="ida1"></p><p>既然输入输出的数据是4字节的…那么输入的明文数据肯定在0-0xFFFFFFFF之间,所以直接模拟这个函数的加密流程,把输入明文数据0-0xFFFFFFFF的所有对应密文数据保存进一个文件,然后通过这个文件来查询每个明文对应的密文,相当于暴力破解了这个加密函数23333,最后跑出了一个16GB的文件来破解这个加密函数</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf2.png" alt="ctf2"></p><p>跑出flag</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf_flag.png" alt="ctf_flag"></p><p>这题是肝了整整两天…最后flag是做出来了,比赛结束回头一看别人的writeup,深深的体会到了自己对CTF逆向这块不了解的东西太多了</p><h2 id="开始学习CTF"><a href="#开始学习CTF" class="headerlink" title="开始学习CTF"></a>开始学习CTF</h2><p>本人ctf方向 : re/pwn</p><p>经历了hws的那次难受的解题之后,我觉得不能在这么靠蛮力逆下去了,必须要开始学习起技巧.</p><p>Reverse : 首先就是密码学的那些加解密算法,打Reverse密码学真的是太重要了,我给自己的要求是能够用C++手写出那些加解密算法,手写过一遍才能真正了解这些算法的底层实现和细节</p><p>PWN : 个人感觉学pwn主要还是看wp学技巧,不过得要非常熟悉Linux环境,许多PWN的技巧还是利用Linux的各种特性和机制,比如格式化字符串漏洞,Linux系统上的格式化字符串是会有一些特殊的规则的,还有main函数里头的environ结构泄露栈地址指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个人说明&quot;&gt;&lt;a href=&quot;#个人说明&quot; class=&quot;headerlink&quot; title=&quot;个人说明&quot;&gt;&lt;/a&gt;个人说明&lt;/h2&gt;&lt;p&gt;本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.&lt;/p&gt;
&lt;p&gt;2020年开始逐渐进入ctf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/05/16/hello-world/"/>
    <id>http://example.com/2021/05/16/hello-world/</id>
    <published>2021-05-16T15:02:17.809Z</published>
    <updated>2021-05-16T15:02:17.809Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
