<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-23T03:02:20.320Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/23/Rev_APC/"/>
    <id>http://example.com/2021/08/23/Rev_APC/</id>
    <published>2021-08-23T02:51:19.090Z</published>
    <updated>2021-08-23T03:02:20.320Z</updated>
    
    <content type="html"><![CDATA[<h1>Rev_APC</h1><p>差点拿一血,可惜了</p><p><img src="media_REVAPC/9e9bfd3f30522d58bec398515a40df30.png" alt=""></p><p>一看题目给出的文件,可以确定是本人最擅长的Windows内核和注入相关题目,必须要把这个驱动安排的明明白白的</p><p>把驱动拖入IDA分析,发现创建了通信设备</p><p><img src="media_REVAPC/34898a956775b98b94a250d2d0b283f1.png" alt=""></p><p>解密加密的dll文件数据,释放到C:\WINDOWS\TEMP\InjectDLL.dll<img src="media_REVAPC/6ca9442f65d7e9df4c9c5aedc31bd987.png" alt=""></p><p>注册了minifilter,暂时没有发现这个minifilter有什么用,可能是配合LoadImage回调里的计算文件名用的</p><p><img src="media_REVAPC/eb0473731695c5398afc751aa3ff1c63.png" alt=""></p><p>还另外创建了LPC端口用来与r3通信</p><p><img src="media_REVAPC/992ba334e435c0da4c5dcb6e6003464d.png" alt=""></p><p>创建一个SystemThread监听LPC端口</p><p><img src="media_REVAPC/883fa96d2bb3afba9be0da06b6cb9fde.png" alt=""></p><p>创建了进程通知回调和LoadImage回调</p><p><img src="media_REVAPC/b96b740c81cdb24765006467f0945f02.png" alt=""></p><p>先来看进程通知回调</p><p><img src="media_REVAPC/79ebdfb55e2b46d4f954381ef7c9904f.png" alt=""></p><p>insert_contextlist这边取了一波进程映像名字符串的hash,如果是explorer.exe,就设置context+301的flag,其实就是指定注入explorer.exe</p><p><img src="media_REVAPC/0941d0b18f97b5cb9c74e1863704bbfb.png" alt=""></p><p>来看LoadImage回调</p><p>如果当前执行该回调的进程是explorer.exe,则插入一个内核模式apc</p><p><img src="media_REVAPC/6432975013e3cf99bfd5c20f9ac37d85.png" alt=""></p><p><img src="media_REVAPC/80e6de4d86041894a41614ebb8a9f49e.png" alt=""></p><p>fntable[0x100]的地方是执行注入r3的函数,所以文件名算出来的合必须为0x100</p><p><img src="media_REVAPC/9135714dc3ea8ee01e79cb17bb9522c9.png" alt=""></p><p>注入shellcode的过程是用ZwMapViewOfSection来申请R3注入代码所需的RWX内存,然后插入用户模式APC,异步执行R3注入代码</p><p><img src="media_REVAPC/60bf87fea5b47af10ee8b9bfc2e82211.png" alt=""></p><p><img src="media_REVAPC/f2dfd25ad02da40a1c54a65c6f233c3e.png" alt=""></p><p>R3 shellcode:</p><p><img src="media_REVAPC/ada89dddeb9a37b61bc84cc2fefea063.png" alt=""></p><p>至此,该驱动的基本功能已分析完毕</p><h3 id="构建调试环境条件">构建调试环境条件</h3><p>因为要求注入的是explorer.exe,但是注入系统的explorer.exe会导致进程崩溃,所以我自己编译了一份与explorer.exe映像名称相同的exe来调试InjectDLL.dll</p><p>我这里预先计算出来了一个文件名来绕过Load<br>Image回调的限制<img src="media_REVAPC/7746ec19fe4965b30dffe0c3889b2092.png" alt=""></p><h3 id="分析InjectDLL-dll">分析InjectDLL.dll</h3><p>先Load了一个不存在的dll,调用了里面的&quot;GetContentHash&quot;函数</p><p><img src="media_REVAPC/64cadba1964cb6224f19a49a9ffbf25f.png" alt="">l</p><p>字符串&quot;test&quot;对应的hash为36F028580BB02CC8272A9A020F4200E346E276AE664E45EE80745574E2F5AB80,经过一番搜索后,可知这是SHA3-256算法</p><p>在线计算得出字符串’AkiraDDL’的SHA3-256值为9d5f741799d7e62274f01963516316d2eb6888b737bab0a2b0e1774e3b7389e5</p><p>手动编写一个dll,导出GetContentHash函数,粗略cmp一下就行</p><p><img src="media_REVAPC/7164598c651899da035f4aa2adba97ee.png" alt=""></p><p>创建设备与R0通信,然后再使用lpc和r0通信</p><p>这里的数据都是固定的,动态调试dump下来就行</p><p><img src="media_REVAPC/1a273744b935a08418a330639c86f497.png" alt=""></p><p>这里的rand没有设定随机数种子,所以可以模拟出来每次的返回值</p><p><img src="media_REVAPC/674d37024198f0e418aa62e37a6fb0bb.png" alt=""></p><p>case里面是与驱动通信来加密buf的</p><p>将各个加密函数求出逆运算即可解密flag</p><p>flag : flag{Kmode_Umode_Communication!}</p><p>解密代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;intrin.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec1</span><span class="params">(PCHAR b1, PCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v9;</span><br><span class="line">    <span class="keyword">char</span> v8;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        v9 = i;</span><br><span class="line">        v8 = b1[i];</span><br><span class="line">        b2[i] ^= v8;</span><br><span class="line">        b1[i] -= <span class="number">0x10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec2</span><span class="params">(PCHAR b1, PCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v8 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">char</span> b1v = b1[i];</span><br><span class="line">        _asm mov al, b1v;</span><br><span class="line">        _asm ror al, <span class="number">4</span>;</span><br><span class="line">        _asm mov v8, al;</span><br><span class="line">        b2[i] ^= v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b1[i] += <span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec3</span><span class="params">(PCHAR b1, PCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b2[i] ^= b1[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec4</span><span class="params">(PCHAR b1, PCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*for (int i = 0xF; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="comment">        char v = b1[i * 2];</span></span><br><span class="line"><span class="comment">        b2[i * 2 + 1] ^= v &gt;&gt; 4;</span></span><br><span class="line"><span class="comment">        b2[i * 2] ^= v * 16;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    BYTE* v8; <span class="comment">// r8</span></span><br><span class="line">    BYTE* fu_sz; <span class="comment">// r10</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// r9</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int8 v_pbuf1; <span class="comment">// cl</span></span><br><span class="line">    v8 = (BYTE*)(b2 + <span class="number">1</span>);</span><br><span class="line">    fu_sz = (BYTE*)<span class="number">-0x20</span>;</span><br><span class="line">    v10 = <span class="number">0x10</span>;<span class="comment">// 0x10</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v_pbuf1 = v8[(DWORD64)fu_sz - <span class="number">1</span>];</span><br><span class="line">        *v8 ^= v_pbuf1 &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        v8 += <span class="number">2</span>;</span><br><span class="line">        *(v8 - <span class="number">3</span>) ^= <span class="number">16</span> * v_pbuf1;</span><br><span class="line">        --v10;</span><br><span class="line">    &#125; <span class="keyword">while</span> (v10);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b1[i] += <span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec5</span><span class="params">(PCHAR b1, PCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        b2[i] ^= b1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* buf1_right = &amp;b1[<span class="number">0x10</span>];</span><br><span class="line">    <span class="keyword">char</span>* buf1_left = &amp;b1[<span class="number">0x10</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0xF</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = *buf1_right;</span><br><span class="line">        *buf1_right = *buf1_left;</span><br><span class="line">        *buf1_left = temp;</span><br><span class="line">        buf1_left--;</span><br><span class="line">        buf1_right++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* buf1_start = b1;</span><br><span class="line">    <span class="keyword">char</span>* buf1_end = &amp;b1[<span class="number">0x20</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0xF</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = <span class="number">0</span>;</span><br><span class="line">        temp = *buf1_start;</span><br><span class="line">        *buf1_start = *buf1_end;</span><br><span class="line">        *buf1_end = temp;</span><br><span class="line">        buf1_start++;</span><br><span class="line">        buf1_end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_dec6</span><span class="params">(PUCHAR b1, PUCHAR b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> v8 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0x1F</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b1[i] == <span class="number">0x50</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (b1[i] == <span class="number">0x80</span>)</span><br><span class="line">            __debugbreak();</span><br><span class="line">        <span class="keyword">if</span> (b1[i] &gt; <span class="number">0x50</span> &amp;&amp; b1[i] &lt;= <span class="number">0xCF</span>) &#123;</span><br><span class="line">            v8 = b1[i];</span><br><span class="line">            b1[i] += <span class="number">0x30</span>;</span><br><span class="line">            b2[i] += v8;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b1[i] &gt; <span class="number">0x20</span> &amp;&amp; b1[i] &lt;= <span class="number">0x4F</span>) &#123;</span><br><span class="line">            v7 = b1[i];</span><br><span class="line">            b1[i] += <span class="number">0x30</span>;</span><br><span class="line">            b2[i] ^= v7 &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b1[i] &gt; <span class="number">0xD0</span> &amp;&amp; b1[i] &lt;= <span class="number">0xFF</span>) &#123;</span><br><span class="line">            v6 = b1[i];</span><br><span class="line">            b1[i] += <span class="number">0x50</span>;</span><br><span class="line">            b2[i] -= v6;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pstatic[] = &#123; <span class="number">0xF5</span>, <span class="number">0x9A</span>, <span class="number">0xF7</span>, <span class="number">0xA1</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0xD6</span>, <span class="number">0x23</span>, <span class="number">0xE1</span>, <span class="number">0x28</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0xDE</span>, <span class="number">0x23</span>, <span class="number">0xE7</span>, <span class="number">0x2F</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pebuf[] = &#123; <span class="number">0xDC</span>, <span class="number">0xA7</span>, <span class="number">0xCA</span>, <span class="number">0x92</span>, <span class="number">0xFE</span>, <span class="number">0x9D</span>, <span class="number">0xED</span>, <span class="number">0xB8</span>, <span class="number">0x70</span>, <span class="number">0x29</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> use_buf1[<span class="number">0x20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(use_buf1, pstatic, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(use_buf1 + <span class="number">0x10</span>, pebuf, <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> use_buf2[<span class="number">0x20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    *(ULONG64*)use_buf2 = <span class="number">0x2F34A83A1B38C557</span>;</span><br><span class="line">    *(ULONG64*)(use_buf2 + <span class="number">0x8</span>) = <span class="number">0xEE8F2F04E4C69739</span>;</span><br><span class="line">    *(ULONG*)(use_buf2 + <span class="number">0x10</span>) = <span class="number">0x6780515E</span>;</span><br><span class="line">    *(ULONG*)(use_buf2 + <span class="number">0x14</span>) = <span class="number">0x486FC924</span>;</span><br><span class="line">    *(ULONG*)(use_buf2 + <span class="number">0x18</span>) = <span class="number">0xC7BD7F5B</span>;</span><br><span class="line">    *(ULONG*)(use_buf2 + <span class="number">0x1C</span>) = <span class="number">0xEBC2C2B0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> all_buf[<span class="number">0x40</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(all_buf, use_buf1, <span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(all_buf + <span class="number">0x20</span>, use_buf2, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* pbuf1 = (<span class="keyword">char</span>*)all_buf;</span><br><span class="line">    <span class="keyword">char</span>* pbuf2 = (<span class="keyword">char</span>*)(all_buf + <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> reverseidx[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    HMODULE hmod = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;ucrtbase.dll&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fnrand)</span><span class="params">()</span></span>;</span><br><span class="line">    fnrand prand = (fnrand)<span class="built_in">GetProcAddress</span>(hmod, <span class="string">&quot;rand&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">prand</span>() % <span class="number">6</span>;</span><br><span class="line">        reverseidx[i] = v;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = reverseidx[j];</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">re_dec1</span>(pbuf1, pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">re_dec2</span>(pbuf1, pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">re_dec3</span>(pbuf1, pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">re_dec4</span>(pbuf1, pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">re_dec5</span>(pbuf1, pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">re_dec6</span>((PUCHAR)pbuf1, (PUCHAR)pbuf2);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Rev_APC&lt;/h1&gt;
&lt;p&gt;差点拿一血,可惜了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;media_REVAPC/9e9bfd3f30522d58bec398515a40df30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一看题目给出的文件,可以确定是本人最擅长的Window</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Reverse]美团ctf 2021 100mazes WriteUp</title>
    <link href="http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/"/>
    <id>http://example.com/2021/05/24/Reverse-%E7%BE%8E%E5%9B%A2ctf-2021-100mazes-WriteUp/</id>
    <published>2021-05-23T16:01:21.000Z</published>
    <updated>2021-05-23T17:09:10.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解题思路">解题思路</h2><p>拿到题目,发现有混淆,用脚本去除后F5出伪代码</p><img src="/2021/05/24/ida1.png" alt="ida1" style="zoom: 50%;" /><p>这里迷宫函数的算法基本都是这样的</p><img src="/2021/05/24/ida2.png" alt="ida2" style="zoom:50%;" /><img src="/2021/05/24/ida3.png" alt="ida3" style="zoom: 50%;" /><p>迷宫的行走逻辑是堆栈里初始化一个地图1,.data段里有一个地图2,定义一个起始坐标(x,y),然后开始往周围走,如果当前地图1(x,y)对应的值和地图2(x,y)对应的值互相异或的结果为整数46并且当前坐标≠上上次的坐标的时候就算正确的路径,每个迷宫有15步</p><p>得出计算迷宫路径的算法:</p><pre><code>#include &lt;iostream&gt;#include &quot;windows.h&quot;int x = 0;int y = 0;int prev_x = 0;int prev_y = 0;int switch_line(const int* maze1, const char* maze2) &#123;int ori_x = x;int ori_y = y;int result = -1;if (x + 1 &lt; 25 &amp;&amp; x + 1 != prev_x) &#123;if ((maze1[y * 25 + x + 1] ^ (((int)maze2[y * 25 + x + 1]) &amp; 0xFF)) == 46) &#123;x = x + 1;result = 3;goto go_end;&#125;&#125;if (x - 1 &gt;= 0 &amp;&amp; x - 1 != prev_x) &#123;if ((maze1[y * 25 + x - 1] ^ (((int)maze2[y * 25 + x - 1]) &amp; 0xFF)) == 46) &#123;x = x - 1;result = 2;goto go_end;&#125;&#125;if (y + 1 &lt; 25 &amp;&amp; y + 1 != prev_y) &#123;if ((maze1[(y + 1) * 25 + x] ^ (((int)maze2[(y + 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y + 1;result = 1;goto go_end;&#125;&#125;if (y - 1 &gt;= 0 &amp;&amp; y - 1 != prev_y) &#123;if ((maze1[(y - 1) * 25 + x] ^ (((int)maze2[(y - 1) * 25 + x]) &amp; 0xFF)) == 46) &#123;y = y - 1;result = 0;goto go_end;&#125;&#125;if (result == -1)_CrtDbgBreak();go_end:prev_x = ori_x;prev_y = ori_y;return result;&#125;void calc_maze(const char* keys, int start_x, int start_y, const int* maze1, const char* maze2) &#123;x = start_x;y = start_y;prev_x = x;prev_y = y;for (int i = 0; i &lt; 15; i++) &#123;printf(&quot;%c&quot;, keys[switch_line(maze1, maze2)]);&#125;&#125;</code></pre><p>到此只完成了一半…有100个迷宫呢,手动输入这些迷宫数据不知道得多久</p><p>我用的方法是利用IDApython自动解析每个迷宫的数据,并且自动生成C源码,部分数据手动输入</p><pre><code>import idaapiimport idautilsdef Section1_0():return 0x5F0def Section1_1():return 0xA7400maze2_list=[]code2_list=[]def walk_stack_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9FA'):return retstrinst_addr=idc.next_head(inst_addr)def walk_key_mem(inst_addr):retstr=&quot;&quot;while True:ins_str=idc.GetDisasm(inst_addr)if(ins_str[0:17]!=&quot;mov     [rbp+var_&quot;):inst_addr=idc.next_head(inst_addr)continueval=idc.get_operand_value(inst_addr,1)retstr=retstr+(&quot;\\x%02x&quot; % val)if(ins_str[0:20]=='mov     [rbp+var_9F6'):return retstrinst_addr=idc.next_head(inst_addr)def walk_func(start,end):cnt=0cur_inst=startwhile cur_inst!=0xffffffffffffffff:cur_inst=idc.next_head(cur_inst)inst_str=idc.GetDisasm(cur_inst)if(inst_str[0:20]=='mov     [rbp+var_C6A'):rstr=walk_stack_mem(cur_inst)maze2_list.append(&quot;maze2 = \&quot;&quot;+rstr+&quot;\&quot;;&quot;)cnt=cnt+1if(inst_str[0:20]=='mov     [rbp+var_9F9'):rstr=walk_key_mem(cur_inst)code2_list.append(&quot;calc_maze(\&quot;&quot;+rstr)walk_func(Section1_0(),Section1_1())find_maze1(Section1_0(),Section1_1())deststr=&quot;&quot;for i in range(100):deststr=deststr+maze2_list[i]+'\n'+code2_list[i]+'\n'f=open('code2.txt','w+')f.write(deststr)f.close()</code></pre><p>解出输入数据为99g99M9999ggggpCSSSOOlOllOlOOOrrrnnnnrnntttntTmm44m44K444m44DDJJxJJDJJDDDDStjtjjttPtPPPtPPQ<br>vQQyQQQyQQQvvc11KKDKDDAADDDAA4444jjjYjYYY99YQQQxxQQxxnxnnxn66A6AANNWNNWNNWY1YYY<br>1Y11QQQQ1QBBxxhhhhhhxhxhxPyPPVVVPPPyyPPVpzzzzpzzhhhhhzhuuggguururrr00rssXX3X3X33t3t3tqKq<br>qKKEEKEEEwEw1zzjzjjojojoojomKmmmKKXXXKKXKXQQFFQFFQQ8Q88QQllRRlljjllllRlRo666o6oooommQmQJ<br>JRJJJSJSJSJSJJBFFBFBFBBFBFFkFCCGGCCXCCXXvvXXxEEGGGWGWWGGWWx4464644QQQ44Q44HyyHHhHHHy<br>yHHHyeFFFFeFFuuuuuukTbTTFTFTFF55555LfffLffffoooonnXXPPGPPGPGGGGPPBooBoBB4BBB44B4TkTTkkk<br>GG0GG00GZZdZddAdAAAAAAW8d88HHHHHnnHnnHJJNJNJNJJJYYIYYNN00ppppQpQpppQzTTTzTzTTTTZZfZU<br>ppppeppUUpUUmUVMVVlVlVVVMVMVVL9L99O99999O9OOBQBQQSSSSSSSSgSjgjgjgggguggjggvpvppp88p8<br>pppppojojjooooojojjjTcTTTTuTTcTTTTTmnnDnDDSDDnDnDn3C3C3C3C333jjhjxxZZxZxZxxxxxxxWWUUWWU<br>UUWWEWEEo00o000EE00E000KKEKEKEEEEKKEE9viiviiivvggggg200V000VVeVV0VVVvvuu1u1u1u111NNCkCC<br>Ckkk55I5555zFzz9z99eeeeeFe5BBBBppBppppFppMMMMMMaaanannna4gggg4ggtttssssfHfHHDDHDDDDH<br>DDcqcqqqqqqtqqccIppzpzzppzppzzUzrvvrvrrtrtrrvrrCppZppCppCCQCCQOkOkOOSSOSS66SSZvvvvOOTTTO<br>OOTOvvKKvvGvvvGGaaaYddMMdMdMMjMjMMQOQOO555LL5LLLQvvBvBBfBBfffBBvdzdzdzdzzfzfzffzXXXh<br>XhXhXhhhhXADAAAAffHHffAfAKQKQQKKpppKpKKphhJJhJhJhJJJPPqoooHHHoHoHooDoDC3333CC6CC666C6<br>LOLOLOLOLOOLOOOxexxee3ee33eeeerrvrrrrvvYYYYYYvvvvvGGGGGwGwGGJnJJnnnnwwwywwnncccncnccU<br>cUUUdOrOOOrOrrYYYNYYW0WW00W00WWWFWFzzQzQQzzaaasaazbGbGGLLYLYLYYbYsfssfffffmmfmfmW<br>WKKVKKVKKWKKVKVsVsVsVVVsVVtVtZ4Z4444MMMMMjjZddnddaaddnnddaaIIIIhIIIIIiiiiW3ffff88ff3f3ff8FfFFfF<br>fFFSFFfFFkkrrrsrsrrsssppiMiiWiiMMiiMiMi</p><p>md5后: 60e925573e0c31236eb1c57005fc0655<br>flag: flag{60e92557-3e0c-3123-6eb1-c57005fc0655}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解题思路&quot;&gt;解题思路&lt;/h2&gt;
&lt;p&gt;拿到题目,发现有混淆,用脚本去除后F5出伪代码&lt;/p&gt;
&lt;img src=&quot;/2021/05/24/ida1.png&quot; alt=&quot;ida1&quot; style=&quot;zoom: 50%;&quot; /&gt;
&lt;p&gt;这里迷宫函数的算法基本都是这样的&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Hu4ji] 开始写Blog记录自己ctf的学习经历</title>
    <link href="http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    <id>http://example.com/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/</id>
    <published>2021-05-18T08:51:41.000Z</published>
    <updated>2021-05-18T15:02:47.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人说明"><a href="#个人说明" class="headerlink" title="个人说明"></a>个人说明</h2><p>本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.</p><p>2020年开始逐渐进入ctf这个圈子,参加过一些ctf比赛,ctf的解题手法还是和现实对抗还是有着很大的区别 </p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>之前打逆向只会IDA看算法,密码学啥的是啥也不会(手动狗头</p><p>打hws2021的时候,第二题obfu有个环节是AES算法,当时这个算法的IDA反汇编看的我是人都麻了,最后想到了一个好办法</p><p>这是那题AES加密的函数:</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ida1.png" alt="ida1"></p><p>既然输入输出的数据是4字节的…那么输入的明文数据肯定在0-0xFFFFFFFF之间,所以直接模拟这个函数的加密流程,把输入明文数据0-0xFFFFFFFF的所有对应密文数据保存进一个文件,然后通过这个文件来查询每个明文对应的密文,相当于暴力破解了这个加密函数23333,最后跑出了一个16GB的文件来破解这个加密函数</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf2.png" alt="ctf2"></p><p>跑出flag</p><p><img src="/2021/05/18/Hu4ji-%E5%BC%80%E5%A7%8B%E5%86%99Blog%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1ctf%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/blog-1/ctf_flag.png" alt="ctf_flag"></p><p>这题是肝了整整两天…最后flag是做出来了,比赛结束回头一看别人的writeup,深深的体会到了自己对CTF逆向这块不了解的东西太多了</p><h2 id="开始学习CTF"><a href="#开始学习CTF" class="headerlink" title="开始学习CTF"></a>开始学习CTF</h2><p>本人ctf方向 : re/pwn</p><p>经历了hws的那次难受的解题之后,我觉得不能在这么靠蛮力逆下去了,必须要开始学习起技巧.</p><p>Reverse : 首先就是密码学的那些加解密算法,打Reverse密码学真的是太重要了,我给自己的要求是能够用C++手写出那些加解密算法,手写过一遍才能真正了解这些算法的底层实现和细节</p><p>PWN : 个人感觉学pwn主要还是看wp学技巧,不过得要非常熟悉Linux环境,许多PWN的技巧还是利用Linux的各种特性和机制,比如格式化字符串漏洞,Linux系统上的格式化字符串是会有一些特殊的规则的,还有main函数里头的environ结构泄露栈地址指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个人说明&quot;&gt;&lt;a href=&quot;#个人说明&quot; class=&quot;headerlink&quot; title=&quot;个人说明&quot;&gt;&lt;/a&gt;个人说明&lt;/h2&gt;&lt;p&gt;本人目前大一,是个好学生!!!热爱研究Windows内核,游戏安全,以及CTF.&lt;/p&gt;
&lt;p&gt;2020年开始逐渐进入ctf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/05/16/hello-world/"/>
    <id>http://example.com/2021/05/16/hello-world/</id>
    <published>2021-05-16T15:02:17.809Z</published>
    <updated>2021-05-16T15:02:17.809Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
